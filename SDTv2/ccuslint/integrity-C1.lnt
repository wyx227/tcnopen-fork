/*******************************************************************************
 *  COPYRIGHT     : This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 *                  If a copy of the MPL was not distributed with this file, 
 *                  You can obtain one at http://mozilla.org/MPL/2.0/.
 *                  Copyright Alstom Transport SA or its subsidiaries and others, 2011-2022. All rights reserved. 
 *******************************************************************************
 * %PCMS_HEADER_SUBSTITUTION_START%
 * COMPONENT:   TCMS Platform
 *
 * ITEM-SPEC:   %PID%
 *
 * FILE:        %PM%
 *
 * REQ DOC:     <Requirements document identity>
 * REQ ID:      <list of requirement identities>
 *
 * ABSTRACT:    PC-lint configuration file for GHS Integrity C1 Criticality
 *              applications.
 *
 * $Id: integrity-C1.lnt 2681 2011-06-19 12:14:07Z jaerikss $
 *
 *******************************************************************************
 * HISTORY:
 *
 %PL%
 *%PCMS_HEADER_SUBSTITUTION_END%
 ******************************************************************************/


/*******************************************************************************
 * Defines
 */
-d"__INTEGRITY=1"
-d"_INTEGRITY_SOURCE=1"
-d"__INT_BIT=32"


/*******************************************************************************
 * Include paths
 */

/*******************************************************************************
 * It is allowed to use the 'ghs' pragma.
 */
-"esym(975, ghs)"

/*******************************************************************************
 * Ignoring lint messages caused by calls to, and usage of, Green Hills
 * Software's Integrity API and C runtime.
 */
+libdir(C:\GHS*,Integrate)
+libh(elf.h)
+libh(*_int.h)
-wlib(3)
-elib(1*, 2*, 3*, 4*, 5*, 6*, 7*, 8*, 9*)
/*
-elib(*)
-wlib(0)
*/

/*******************************************************************************
 * Ignoring lint messages caused by #defines within Integrity headers, or
 * headers generated by Integrity tools, that the project cannot affect.
 */
-"elibcall(960)"
-"elibmacro(960)"
-"elibmacro(961)"


/*******************************************************************************
 * Types defined by Integrity shall be used as strong types. Boolean expression
 * shall be forced to be effectively Boolean.
 */
-strong(AczJaczX,Address,ObjectIndex,Length,TargetAddress,TargetLength,Value)
-strong(AczJaczXB,Boolean)
-parent(U32,Address,ObjectIndex,Value)
-parent(Value,size_t)
/*
-parent(Address,ObjectIndex)
-parent(ObjectIndex,Value)
*/

/*******************************************************************************
 * The fundamental type of the type Boolean is unsigned. Therefore, the actual
 * value of a Boolean type is 'zero' and 'not zero'. If a Boolean type is
 * assigned, or compared against, the #define value 'TRUE' with strong type
 * enabled for Boolean, PC-lint will emit message 697. Either we could mandate
 * that all comparisons should be made against the #define value 'FALSE', but it
 * would make the understanding of the code less intuitive, or we could suppress
 * this message. Thus, we suppress message 697 instead.
 */
-e697

/*******************************************************************************
 * GHS has implemented many formal function arguments to be pointers to an object
 * type, while they actually represents numerical values of type Value. Therefore,
 * the messages 740 and 929 shall be suppressed in calls to the GHS libraries.
 */
-elibcall(740, 923, 929)

/*******************************************************************************
 * GHS task entry point declarations do not conform to MISRA-C:2004 rules (use
 * of 'int' outside a typedef and not using 'void' for an empty parameter list).
 * By using the TASK_ENTRY macro, we can wrap these declarations and suppress
 * messages caused by this non-conformity.
 * The macro also provides a visual cue for task entry points.
 */
-"emacro(970, TASK_ENTRY)"

/*******************************************************************************
 * GHS has implemented many numerical values of type Value as pointers.
 * Therefore, by using the OBJECT macro, it is possible to suppress messages
 * 740, 923 and 929 caused by the GHS implementation.
 */
-"emacro(740, OBJECT)"
-"emacro(923, OBJECT)"
-"emacro(929, OBJECT)"

-"emacro(835,IPAddress)" /* DevID-nnnn */
-"emacro(845,IPAddress)" /* DevID-nnnn */

/*******************************************************************************
 * Variables of these types are defined in GHS (Integrity) code, and are
 * reported that they could be declared const. We cannot do anything about this
 * so we suppress that warning on all objects of these types.
 */
-"esym(843, u_int8_t)"
-"esym(843, u_int16_t)"
-"esym(843, u_int32_t)"
-"esym(843, u_int64_t)"

-"esym(586, exit)"

/*******************************************************************************
 * DevID-0009. All INTEGRITY API calls shall be made with __CHECK_API_ERROR
 * set to 1. This causes any API error to generate an exception. Thus, no need to
 * check any return code.
 */
-"esym(534, __CheckError)"
-"esym(534, __UserException)"
-"esym(534, AsynchronousReceive)"
-"esym(534, ContinueActivity)"
-"esym(534, CopyFromTask)"
-"esym(534, CreateActivity)"
-"esym(534, CreateBinarySemaphore)"
-"esym(534, GetClockTime)"
-"esym(534, GetTaskExceptionStatus)"
-"esym(534, GetTaskName)"
-"esym(534, GetTaskStatusNotificationMask)"
-"esym(534, ExitTask)"
-"esym(534, GetMemoryRegionAddresses)"
-"esym(534, KernelPartitionModeChange)"
-"esym(534, ReleaseSemaphore)"
-"esym(534, RunTask)"
-"esym(534, SetTaskStatusNotificationMask)"
-"esym(534, TaskSendException)"
-"esym(534, WaitForSemaphore)"

-"esym(534, printf)"

/*******************************************************************************
 * The GHS header files stdio.h and stdlib.h does include repeated include
 * guards. Therefore, lint message 451 can safely be suppressed for these files.
 */
 -"esym(451,*\ansi\stdio.h)"
 -"esym(451,*\ansi\stdlib.h)"
 -"esym(451,*\ansi\string.h)"

/*******************************************************************************
 * Target specific configuration
 */

/*******************************************************************************
 * Check that functions not allowed in Integrity C1, C2, or C3 level
 * applications are not employed.
 */
-deprecate(function, CreateOneWaySendActivity, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, SuspendActivity, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetClockName, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetFirstMemoryRegion, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetNextMemoryRegion, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, FillTask, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetTaskStatusChangeOverruns, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, LowerCurrentTaskPriority, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, RaiseCurrentTaskPriority, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, SetTaskInterruptVector, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TaskExecuteOneInstruction, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, CreateVirtualAddressSpace, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, FillAddressSpace, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetFreeObjectIndex, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetObjectCount, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetPhysicalAddress, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, INTERRUPT_InstallUserCallHandler, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, PutPageOnKernelSpaceFreeList, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, SetObjectCount, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, UserCall, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, AddressSpaceAddressFaultOverruns, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, DeliverAddressFault, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, DeliverAddressFaultWithAddress, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, MemoryRegionUsage, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, CloseAddressSpace, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, CloseIODevice, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveObject, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveActivity, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveAddressSpace, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveClock, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveConnection, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveIODevice, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveLink, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveMemoryRegion, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveSemaphore, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GiveTask, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, FinishMove, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeObject, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeActivity, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeAddressSpace, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeClock, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeConnection, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeIODevice, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeLink, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeMemoryRegion, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeSemaphore, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, TakeTask, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetRTCState, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, SetRTCState, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, ForceOutputToConsole, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetTaskProgramCounter, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetTaskRegister, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, GetTaskStackPointer, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, RestartAddressSpace, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, SetTaskProgramCounter, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, SetTaskRegister, Not Allowed in any C1, C2, or C3 level application )
-deprecate(function, SetTaskStackPointer, Not Allowed in any C1, C2, or C3 level application )

/*******************************************************************************
 * Restricted functions. May only be used under special circumstances.
 */

-deprecate(function, AdjustClockTime, Only allowed during system initializtion. Not allowed to be called from a VAS )
-deprecate(function, SetClockTime, Only allowed during system initializtion. Not allowed to be called from a VAS )


/*******************************************************************************
 * TBD
 */
-"esym(788,Error::*)"

-e835
-"esym(14,main)"
-"esym(527,__CheckError)"
